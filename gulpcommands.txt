make sure to use at beginning:
npm init
bower init
or cloning:
npm install
bower install
when ready to run:
gulp build
gulp serve

//==== 1.) npm init === //
//==== 2.) npm install gulp --save-dev === //
2a.) npm install gulp -g (only needs to be run once per machine)
//==== 3.) npm install browserify --save-dev === //

    var gulp = require('gulp');

//==== 4.) npm install vinyl-source-stream --save-dev === //

    var browserify = require('browserify');
    var source = require('vinyl-source-stream');

//==== 5.) gulp jsBrowserify === //
//==== 6.) npm install gulp-concat --save-dev === //

    var concat = require('gulp-concat');

    //place above the browserify
    gulp.task('concatInterface', function() {
      return gulp.src(['./js/*-interface.js'])
        .pipe(concat('allConcat.js'))
        .pipe(gulp.dest('./tmp'));
    });

    //browserify must also be altered
    gulp.task('jsBrowserify', ['concatInterface'], function() {
      return browserify({ entries: ['./tmp/allConcat.js'] })
        .bundle()
        .pipe(source('app.js'))
        .pipe(gulp.dest('./build/js'));
    });

//==== 7.) npm install gulp-uglify --save-dev === //

      var uglify = require('gulp-uglify');

      //place after browserify
      gulp.task("minifyScripts", ["jsBrowserify"], function(){
        return gulp.src("./build/js/app.js")
          .pipe(uglify())
          .pipe(gulp.dest("./build/js"));
      });

      gulp minifyScripts

      gulp.task("build", function(){
        if (buildProduction) {
          gulp.start('minifyScripts');
        } else {
          gulp.start('jsBrowserify');
        }
      });

//==== 8.) npm install gulp-util --save-dev

      var utilities = require('gulp-util');
      var buildProduction = utilities.env.production;
      gulp build --production
      gulp build

//==== 9.) npm install del --save-dev

      var del = require('del');

      gulp.task("clean", function(){
        return del(['build', 'tmp']);
      });

      //edit build task
      gulp.task("build", ['clean'], function(){
        if (buildProduction) {
          gulp.start('minifyScripts');
        } else {
          gulp.start('jsBrowserify');
        }
      });

//==== 10.) npm install jshint --save-dev
            npm install gulp-jshint --save-dev

      var jshint = require('gulp-jshint');

      // place at bottom
      gulp.task('jshint', function(){
        return gulp.src(['js/*.js'])
          .pipe(jshint())
          .pipe(jshint.reporter('default'));
      });

//==== 11.) npm install bower -g (if needed to install on machine)
//==== 11a.) bower init

//==== 12.) bower install jquery --save
      <script src="bower_components/jquery/dist/jquery.min.js"></script>


//==== 13.) bower install bootstrap --save

      top of html should look like:
      <script src="bower_components/jquery/dist/jquery.min.js"></script>
      <link rel="stylesheet" href="bower_components/bootstrap/dist/css/bootstrap.min.css">
      <script src="bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
      <link rel="stylesheet" href="css/styles.css">
      <script type="text/javascript" src="build/js/app.js"></script>

!!//==== 14.) bower install moment --save (this can be used for time stuff)!!

//==== 15.) npm install bower-files --save-dev

      var lib = require('bower-files')();

      gulp.task('bowerJS', function () {
      return gulp.src(lib.ext('js').files)
      .pipe(concat('vendor.min.js'))
      .pipe(uglify())
      .pipe(gulp.dest('./build/js'));
      });


      gulp.task('bowerCSS', function () {
      return gulp.src(lib.ext('css').files)
        .pipe(concat('vendor.css'))
        .pipe(gulp.dest('./build/css'));
      });

      top of html can now become
      <link rel="stylesheet" href="build/css/vendor.css">
  <script src="build/js/vendor.min.js"></script>
  <script type="text/javascript" src="build/js/app.js"></script>

      // change lib var from before
      var lib = require('bower-files')({
  "overrides":{
    "bootstrap" : {
      "main": [
        "less/bootstrap.less",
        "dist/css/bootstrap.css",
        "dist/js/bootstrap.js"
      ]
    }
  }
});
    // combine tasks, add after js and css bowers
    gulp.task('bower', ['bowerJS', 'bowerCSS']);

    gulp.task('build', ['clean'], function(){
  if (buildProduction) {
    gulp.start('minifyScripts');
  } else {
    gulp.start('jsBrowserify');
  }
  gulp.start('bower');
});


    // concat css files
    gulp.task("cssBuild", function() {
  gulp.src(['css/*.css'])
  .pipe(concat('vendor.css'))
  .pipe(gulp.dest('./build/css'))
});

<link href="build/css/vendor.css" rel="stylesheet" type="text/css">

gulp build
gulp cssBuild

===== 16.) npm install browser-sync --save-dev
    var browserSync = require('browser-sync').create();

    gulp.task('serve', function() {
      browserSync.init({
        server: {
          baseDir: "./",
          index: "index.html"
        }
      });

      gulp.watch(['js/*.js'], ['jsBuild']);
      gulp.watch(['bower.json'], ['bowerBuild']);
    });

    gulp.task('jsBuild', ['jsBrowserify', 'jshint'], function(){
      browserSync.reload();
    });

    gulp.task('bowerBuild', ['bower'], function(){
  browserSync.reload();
});
